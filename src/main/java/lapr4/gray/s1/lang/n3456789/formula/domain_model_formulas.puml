@startuml domain_model_formulas.png
class Formula {
	+Formula(Cell cell, Expression expression) 
}
interface Expression {
	+Value evaluate()
	+Object accept(ExpressionVisitor visitor)
}
interface Reference {
}
interface Operator {
}
class UnaryOperator {
}
class BinaryOperator {
}
class NaryOperator <<analysis>> {
}
class SequenceOperator <<analysis>> {
}
class AssignmentOperator <<analysis>> {
}
abstract class Operation <O extends Operator> {
    getOperator() 
}
class UnaryOperation {
}
class BinaryOperation {
}
class NaryOperation <<analysis>> {
}
class FunctionCall {
}
class Literal {
}
interface ExpressionVisitor {
	+Object visitLiteral(Literal literal)
	+Object visitUnaryOperation(UnaryOperation operation)
	+Object visitBinaryOperation(BinaryOperation operation)
	+Object visitReference(Reference reference)
	+Object visitFunctionCall(FunctionCall call)
}
Expression <|-- Formula
Expression <|-- Reference
Expression <|-- Operation
Expression <|-- FunctionCall
Expression <|-- Literal
Operation <|-- UnaryOperation
Operation <|-- BinaryOperation
Operation <|-- NaryOperation
Formula --> Reference : getReferences()
Reference --> Cell : getCells();
Cell --> Formula : getFormula
UnaryOperation --> Expression : operand
BinaryOperation --> Expression : leftOperand
BinaryOperation --> Expression : rightOperand
NaryOperation --> Expression : operands

Operator <|-- UnaryOperator
Operator <|-- BinaryOperator
Operator <|-- NaryOperator

UnaryOperation *-- UnaryOperator
BinaryOperation *-- BinaryOperator
NaryOperation *-- NaryOperator

NaryOperator <|-- SequenceOperator

BinaryOperator <|-- AssignmentOperator
  @enduml