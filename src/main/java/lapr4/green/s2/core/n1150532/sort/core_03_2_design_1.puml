@startuml

skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor "User"
participant "SortCellRangeAction"
participant "SpreadsheetTable"
participant "SortCellRangeUI"
participant "SortCellRangeController"
participant "RangeRowDTO"
participant "ComparatorFactory"
participant "RangeRowDTOComparator"
participant "TypeComparator"
participant "AlgorithmFactory"
participant "SortingAlgorithm" << interface >>

User -> SortCellRangeAction : choose action
SortCellRangeAction -> SpreadsheetTable : selectedCells = getSelectedCells()
create SortCellRangeUI
SortCellRangeAction -> SortCellRangeUI : new( selectedCells )
create SortCellRangeController
SortCellRangeUI -> SortCellRangeController : new()
create ComparatorFactory
SortCellRangeController -> ComparatorFactory : new
create AlgorithmFactory
SortCellRangeController -> AlgorithmFactory : new
SortCellRangeUI -> SortCellRangeController : getComparators()
SortCellRangeController -> ComparatorFactory : buildAllRangeRowDTOComparators()
loop
create TypeComparator
ComparatorFactory -> TypeComparator : tc = new()
create RangeRowDTOComparator
ComparatorFactory -> RangeRowDTOComparator : rrc = new( tc )
ComparatorFactory -> ComparatorFactory : add( rrc )
end loop
SortCellRangeUI -> SortCellRangeController : getAlgorithms()
SortCellRangeController -> AlgorithmFactory : getSortingAlgorithms()
loop
create SortingAlgorithm
AlgorithmFactory -> SortingAlgorithm : algorithm = new
AlgorithmFactory -> AlgorithmFactory : add( algorithm )
end loop
SortCellRangeUI -> SortCellRangeUI : render()
SortCellRangeUI -> User : show options
User -> SortCellRangeUI : set options
SortCellRangeUI -> SortCellRangeController : sort( selectedCells , sortingColumn , algorithm , comparator , isDescending )
loop
create RangeRowDTO
SortCellRangeController -> RangeRowDTO : rrDTO = new( row , sortingColumn )
SortCellRangeController -> SortCellRangeController : rangeRowsArray[ i ] = rrDTO;
end loop
SortCellRangeController -> RangeRowDTOComparator : setDescending( isDescending )
SortCellRangeController -> SortingAlgorithm : sort( rangeRowsArray , comparator )
SortingAlgorithm -> RangeRowDTOComparator : compare( rangeRowsArray[i] , rangeRowsArray[j] )
RangeRowDTOComparator -> TypeComparator : compare( type1 , type2 )
SortingAlgorithm -> RangeRowDTO : rangeRowsArray[i].swap( rangeRowsArray[j] )

@enduml
